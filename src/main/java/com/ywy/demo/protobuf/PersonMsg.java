package com.ywy.demo.protobuf;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersonMsg.proto

import com.google.protobuf.*;

public final class PersonMsg {
    private PersonMsg() {}
    public static void registerAllExtensions(
            ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            ExtensionRegistry registry) {
        registerAllExtensions(
                (ExtensionRegistryLite) registry);
    }
    public interface PersonOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Person)
            MessageOrBuilder {

        /**
         * <pre>
         * ID（必需）
         * </pre>
         *
         * <code>required int32 id = 1;</code>
         * @return Whether the id field is set.
         */
        boolean hasId();
        /**
         * <pre>
         * ID（必需）
         * </pre>
         *
         * <code>required int32 id = 1;</code>
         * @return The id.
         */
        int getId();

        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return Whether the name field is set.
         */
        boolean hasName();
        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return The name.
         */
        String getName();
        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return The bytes for name.
         */
        ByteString
        getNameBytes();

        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return Whether the email field is set.
         */
        boolean hasEmail();
        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return The email.
         */
        String getEmail();
        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return The bytes for email.
         */
        ByteString
        getEmailBytes();

        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @return A list containing the friends.
         */
        java.util.List<String>
        getFriendsList();
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @return The count of friends.
         */
        int getFriendsCount();
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @param index The index of the element to return.
         * @return The friends at the given index.
         */
        String getFriends(int index);
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @param index The index of the value to return.
         * @return The bytes of the friends at the given index.
         */
        ByteString
        getFriendsBytes(int index);
    }
    /**
     * Protobuf type {@code Person}
     */
    public  static final class Person extends
            GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:Person)
            PersonOrBuilder {
        private static final long serialVersionUID = 0L;
        // Use Person.newBuilder() to construct.
        private Person(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private Person() {
            name_ = "";
            email_ = "";
            friends_ = LazyStringArrayList.EMPTY;
        }

        @Override
        @SuppressWarnings({"unused"})
        protected Object newInstance(
                UnusedPrivateParameter unused) {
            return new Person();
        }

        @Override
        public final UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private Person(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields =
                    UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8: {
                            bitField0_ |= 0x00000001;
                            id_ = input.readInt32();
                            break;
                        }
                        case 18: {
                            ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            name_ = bs;
                            break;
                        }
                        case 26: {
                            ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000004;
                            email_ = bs;
                            break;
                        }
                        case 34: {
                            ByteString bs = input.readBytes();
                            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                                friends_ = new LazyStringArrayList();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            friends_.add(bs);
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) != 0)) {
                    friends_ = friends_.getUnmodifiableView();
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final Descriptors.Descriptor
        getDescriptor() {
            return PersonMsg.internal_static_Person_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return PersonMsg.internal_static_Person_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            PersonMsg.Person.class, PersonMsg.Person.Builder.class);
        }

        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private int id_;
        /**
         * <pre>
         * ID（必需）
         * </pre>
         *
         * <code>required int32 id = 1;</code>
         * @return Whether the id field is set.
         */
        public boolean hasId() {
            return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * ID（必需）
         * </pre>
         *
         * <code>required int32 id = 1;</code>
         * @return The id.
         */
        public int getId() {
            return id_;
        }

        public static final int NAME_FIELD_NUMBER = 2;
        private volatile Object name_;
        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return Whether the name field is set.
         */
        public boolean hasName() {
            return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return The name.
         */
        public String getName() {
            Object ref = name_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs =
                        (ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                }
                return s;
            }
        }
        /**
         * <pre>
         * 姓名（必需）
         * </pre>
         *
         * <code>required string name = 2;</code>
         * @return The bytes for name.
         */
        public ByteString
        getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (String) ref);
                name_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        public static final int EMAIL_FIELD_NUMBER = 3;
        private volatile Object email_;
        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return Whether the email field is set.
         */
        public boolean hasEmail() {
            return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return The email.
         */
        public String getEmail() {
            Object ref = email_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs =
                        (ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    email_ = s;
                }
                return s;
            }
        }
        /**
         * <pre>
         * email（可选）
         * </pre>
         *
         * <code>optional string email = 3;</code>
         * @return The bytes for email.
         */
        public ByteString
        getEmailBytes() {
            Object ref = email_;
            if (ref instanceof String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (String) ref);
                email_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        public static final int FRIENDS_FIELD_NUMBER = 4;
        private LazyStringList friends_;
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @return A list containing the friends.
         */
        public ProtocolStringList
        getFriendsList() {
            return friends_;
        }
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @return The count of friends.
         */
        public int getFriendsCount() {
            return friends_.size();
        }
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @param index The index of the element to return.
         * @return The friends at the given index.
         */
        public String getFriends(int index) {
            return friends_.get(index);
        }
        /**
         * <pre>
         * 朋友（集合）
         * </pre>
         *
         * <code>repeated string friends = 4;</code>
         * @param index The index of the value to return.
         * @return The bytes of the friends at the given index.
         */
        public ByteString
        getFriendsBytes(int index) {
            return friends_.getByteString(index);
        }

        private byte memoizedIsInitialized = -1;
        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasName()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) != 0)) {
                output.writeInt32(1, id_);
            }
            if (((bitField0_ & 0x00000002) != 0)) {
                GeneratedMessageV3.writeString(output, 2, name_);
            }
            if (((bitField0_ & 0x00000004) != 0)) {
                GeneratedMessageV3.writeString(output, 3, email_);
            }
            for (int i = 0; i < friends_.size(); i++) {
                GeneratedMessageV3.writeString(output, 4, friends_.getRaw(i));
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) != 0)) {
                size += CodedOutputStream
                        .computeInt32Size(1, id_);
            }
            if (((bitField0_ & 0x00000002) != 0)) {
                size += GeneratedMessageV3.computeStringSize(2, name_);
            }
            if (((bitField0_ & 0x00000004) != 0)) {
                size += GeneratedMessageV3.computeStringSize(3, email_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < friends_.size(); i++) {
                    dataSize += computeStringSizeNoTag(friends_.getRaw(i));
                }
                size += dataSize;
                size += 1 * getFriendsList().size();
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof PersonMsg.Person)) {
                return super.equals(obj);
            }
            PersonMsg.Person other = (PersonMsg.Person) obj;

            if (hasId() != other.hasId()) return false;
            if (hasId()) {
                if (getId()
                        != other.getId()) return false;
            }
            if (hasName() != other.hasName()) return false;
            if (hasName()) {
                if (!getName()
                        .equals(other.getName())) return false;
            }
            if (hasEmail() != other.hasEmail()) return false;
            if (hasEmail()) {
                if (!getEmail()
                        .equals(other.getEmail())) return false;
            }
            if (!getFriendsList()
                    .equals(other.getFriendsList())) return false;
            if (!unknownFields.equals(other.unknownFields)) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasId()) {
                hash = (37 * hash) + ID_FIELD_NUMBER;
                hash = (53 * hash) + getId();
            }
            if (hasName()) {
                hash = (37 * hash) + NAME_FIELD_NUMBER;
                hash = (53 * hash) + getName().hashCode();
            }
            if (hasEmail()) {
                hash = (37 * hash) + EMAIL_FIELD_NUMBER;
                hash = (53 * hash) + getEmail().hashCode();
            }
            if (getFriendsCount() > 0) {
                hash = (37 * hash) + FRIENDS_FIELD_NUMBER;
                hash = (53 * hash) + getFriendsList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static PersonMsg.Person parseFrom(
                java.nio.ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static PersonMsg.Person parseFrom(
                java.nio.ByteBuffer data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static PersonMsg.Person parseFrom(
                ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static PersonMsg.Person parseFrom(
                ByteString data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static PersonMsg.Person parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static PersonMsg.Person parseFrom(
                byte[] data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static PersonMsg.Person parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static PersonMsg.Person parseFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static PersonMsg.Person parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static PersonMsg.Person parseDelimitedFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static PersonMsg.Person parseFrom(
                CodedInputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static PersonMsg.Person parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(PersonMsg.Person prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code Person}
         */
        public static final class Builder extends
                GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Person)
                PersonMsg.PersonOrBuilder {
            public static final Descriptors.Descriptor
            getDescriptor() {
                return PersonMsg.internal_static_Person_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return PersonMsg.internal_static_Person_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                PersonMsg.Person.class, PersonMsg.Person.Builder.class);
            }

            // Construct using PersonMsg.Person.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            @Override
            public Builder clear() {
                super.clear();
                id_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                name_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                email_ = "";
                bitField0_ = (bitField0_ & ~0x00000004);
                friends_ = LazyStringArrayList.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            @Override
            public Descriptors.Descriptor
            getDescriptorForType() {
                return PersonMsg.internal_static_Person_descriptor;
            }

            @Override
            public PersonMsg.Person getDefaultInstanceForType() {
                return PersonMsg.Person.getDefaultInstance();
            }

            @Override
            public PersonMsg.Person build() {
                PersonMsg.Person result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public PersonMsg.Person buildPartial() {
                PersonMsg.Person result = new PersonMsg.Person(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) != 0)) {
                    result.id_ = id_;
                    to_bitField0_ |= 0x00000001;
                }
                if (((from_bitField0_ & 0x00000002) != 0)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.name_ = name_;
                if (((from_bitField0_ & 0x00000004) != 0)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.email_ = email_;
                if (((bitField0_ & 0x00000008) != 0)) {
                    friends_ = friends_.getUnmodifiableView();
                    bitField0_ = (bitField0_ & ~0x00000008);
                }
                result.friends_ = friends_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return super.clone();
            }
            @Override
            public Builder setField(
                    Descriptors.FieldDescriptor field,
                    Object value) {
                return super.setField(field, value);
            }
            @Override
            public Builder clearField(
                    Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }
            @Override
            public Builder clearOneof(
                    Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }
            @Override
            public Builder setRepeatedField(
                    Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return super.setRepeatedField(field, index, value);
            }
            @Override
            public Builder addRepeatedField(
                    Descriptors.FieldDescriptor field,
                    Object value) {
                return super.addRepeatedField(field, value);
            }
            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof PersonMsg.Person) {
                    return mergeFrom((PersonMsg.Person)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(PersonMsg.Person other) {
                if (other == PersonMsg.Person.getDefaultInstance()) return this;
                if (other.hasId()) {
                    setId(other.getId());
                }
                if (other.hasName()) {
                    bitField0_ |= 0x00000002;
                    name_ = other.name_;
                    onChanged();
                }
                if (other.hasEmail()) {
                    bitField0_ |= 0x00000004;
                    email_ = other.email_;
                    onChanged();
                }
                if (!other.friends_.isEmpty()) {
                    if (friends_.isEmpty()) {
                        friends_ = other.friends_;
                        bitField0_ = (bitField0_ & ~0x00000008);
                    } else {
                        ensureFriendsIsMutable();
                        friends_.addAll(other.friends_);
                    }
                    onChanged();
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                if (!hasId()) {
                    return false;
                }
                if (!hasName()) {
                    return false;
                }
                return true;
            }

            @Override
            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                PersonMsg.Person parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (PersonMsg.Person) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private int id_ ;
            /**
             * <pre>
             * ID（必需）
             * </pre>
             *
             * <code>required int32 id = 1;</code>
             * @return Whether the id field is set.
             */
            public boolean hasId() {
                return ((bitField0_ & 0x00000001) != 0);
            }
            /**
             * <pre>
             * ID（必需）
             * </pre>
             *
             * <code>required int32 id = 1;</code>
             * @return The id.
             */
            public int getId() {
                return id_;
            }
            /**
             * <pre>
             * ID（必需）
             * </pre>
             *
             * <code>required int32 id = 1;</code>
             * @param value The id to set.
             * @return This builder for chaining.
             */
            public Builder setId(int value) {
                bitField0_ |= 0x00000001;
                id_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             * ID（必需）
             * </pre>
             *
             * <code>required int32 id = 1;</code>
             * @return This builder for chaining.
             */
            public Builder clearId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                id_ = 0;
                onChanged();
                return this;
            }

            private Object name_ = "";
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @return Whether the name field is set.
             */
            public boolean hasName() {
                return ((bitField0_ & 0x00000002) != 0);
            }
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @return The name.
             */
            public String getName() {
                Object ref = name_;
                if (!(ref instanceof String)) {
                    ByteString bs =
                            (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        name_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @return The bytes for name.
             */
            public ByteString
            getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @param value The name to set.
             * @return This builder for chaining.
             */
            public Builder setName(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                name_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @return This builder for chaining.
             */
            public Builder clearName() {
                bitField0_ = (bitField0_ & ~0x00000002);
                name_ = getDefaultInstance().getName();
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 姓名（必需）
             * </pre>
             *
             * <code>required string name = 2;</code>
             * @param value The bytes for name to set.
             * @return This builder for chaining.
             */
            public Builder setNameBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                name_ = value;
                onChanged();
                return this;
            }

            private Object email_ = "";
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @return Whether the email field is set.
             */
            public boolean hasEmail() {
                return ((bitField0_ & 0x00000004) != 0);
            }
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @return The email.
             */
            public String getEmail() {
                Object ref = email_;
                if (!(ref instanceof String)) {
                    ByteString bs =
                            (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        email_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @return The bytes for email.
             */
            public ByteString
            getEmailBytes() {
                Object ref = email_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (String) ref);
                    email_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @param value The email to set.
             * @return This builder for chaining.
             */
            public Builder setEmail(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                email_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @return This builder for chaining.
             */
            public Builder clearEmail() {
                bitField0_ = (bitField0_ & ~0x00000004);
                email_ = getDefaultInstance().getEmail();
                onChanged();
                return this;
            }
            /**
             * <pre>
             * email（可选）
             * </pre>
             *
             * <code>optional string email = 3;</code>
             * @param value The bytes for email to set.
             * @return This builder for chaining.
             */
            public Builder setEmailBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                email_ = value;
                onChanged();
                return this;
            }

            private LazyStringList friends_ = LazyStringArrayList.EMPTY;
            private void ensureFriendsIsMutable() {
                if (!((bitField0_ & 0x00000008) != 0)) {
                    friends_ = new LazyStringArrayList(friends_);
                    bitField0_ |= 0x00000008;
                }
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @return A list containing the friends.
             */
            public ProtocolStringList
            getFriendsList() {
                return friends_.getUnmodifiableView();
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @return The count of friends.
             */
            public int getFriendsCount() {
                return friends_.size();
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param index The index of the element to return.
             * @return The friends at the given index.
             */
            public String getFriends(int index) {
                return friends_.get(index);
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param index The index of the value to return.
             * @return The bytes of the friends at the given index.
             */
            public ByteString
            getFriendsBytes(int index) {
                return friends_.getByteString(index);
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param index The index to set the value at.
             * @param value The friends to set.
             * @return This builder for chaining.
             */
            public Builder setFriends(
                    int index, String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureFriendsIsMutable();
                friends_.set(index, value);
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param value The friends to add.
             * @return This builder for chaining.
             */
            public Builder addFriends(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureFriendsIsMutable();
                friends_.add(value);
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param values The friends to add.
             * @return This builder for chaining.
             */
            public Builder addAllFriends(
                    Iterable<String> values) {
                ensureFriendsIsMutable();
                AbstractMessageLite.Builder.addAll(
                        values, friends_);
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @return This builder for chaining.
             */
            public Builder clearFriends() {
                friends_ = LazyStringArrayList.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000008);
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 朋友（集合）
             * </pre>
             *
             * <code>repeated string friends = 4;</code>
             * @param value The bytes of the friends to add.
             * @return This builder for chaining.
             */
            public Builder addFriendsBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureFriendsIsMutable();
                friends_.add(value);
                onChanged();
                return this;
            }
            @Override
            public final Builder setUnknownFields(
                    final UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:Person)
        }

        // @@protoc_insertion_point(class_scope:Person)
        private static final PersonMsg.Person DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new PersonMsg.Person();
        }

        public static PersonMsg.Person getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        @Deprecated public static final Parser<Person>
                PARSER = new AbstractParser<Person>() {
            @Override
            public Person parsePartialFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return new Person(input, extensionRegistry);
            }
        };

        public static Parser<Person> parser() {
            return PARSER;
        }

        @Override
        public Parser<Person> getParserForType() {
            return PARSER;
        }

        @Override
        public PersonMsg.Person getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final Descriptors.Descriptor
            internal_static_Person_descriptor;
    private static final
    GeneratedMessageV3.FieldAccessorTable
            internal_static_Person_fieldAccessorTable;

    public static Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }
    private static  Descriptors.FileDescriptor
            descriptor;
    static {
        String[] descriptorData = {
                "\n\017PersonMsg.proto\"B\n\006Person\022\n\n\002id\030\001 \002(\005\022" +
                        "\014\n\004name\030\002 \002(\t\022\r\n\005email\030\003 \001(\t\022\017\n\007friends\030" +
                        "\004 \003(\t"
        };
        descriptor = Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new Descriptors.FileDescriptor[] {
                        });
        internal_static_Person_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_Person_fieldAccessorTable = new
                GeneratedMessageV3.FieldAccessorTable(
                internal_static_Person_descriptor,
                new String[] { "Id", "Name", "Email", "Friends", });
    }

    // @@protoc_insertion_point(outer_class_scope)
}
